// js/main.js

const GAME_TICK_MS = 1000; // 1 second
let lastTickTime = 0;

function gameLoop(currentTime) {
    // Calculate deltaTime in seconds, ensuring it's not excessively large on first few frames or after tab unfocus
    const rawDeltaTime = (currentTime - lastTickTime) / 1000;
    const deltaTime = Math.min(rawDeltaTime, GAME_TICK_MS / 1000 * 5); // Cap delta to prevent huge jumps (e.g. max 5 ticks)

    if (rawDeltaTime >= (GAME_TICK_MS / 1000)) { // Process tick if enough time has passed
        lastTickTime = currentTime - ( (rawDeltaTime * 1000) % GAME_TICK_MS ); // Adjust lastTickTime to maintain rhythm

        // 1. Calculate base generation from team members
        const generation = calculateResourceGeneration();
        addResource('energy', generation.energy);
        addResource('manufacturing', generation.manufacturing);
        addResource('coin', generation.coin);
        addResource('science', generation.science); // Science is now generated by team members

        // 2. Apply the global self-multiplier to existing resources
        applyGlobalMultiplier(); // Renamed from applyMultiplier

        // 3. Update active research
        updateResearch(GAME_TICK_MS / 1000); // Pass fixed tick duration for research progress

        // 4. Update UI (selectively for performance)
        updateResourceDisplay(); // Always update resources

        // Update other sections only if they are visible or likely to change
        if (teamManagementSection.classList.contains('active-section') || teamSelectionSection.classList.contains('active-section')) {
            updateTeamDisplay();
            updatePurchaseButton();
        }
        if (researchSection.classList.contains('active-section')) {
            updateResearchDisplay();
        }
        if (upgradesSection.classList.contains('active-section')) {
            // Only refresh trees if they are visible.
            // More granular updates could be triggered by events (e.g., after an upgrade purchase)
            // For simplicity now, we refresh if the section is active.
             updateAllTreesDisplay();
        }
        // console.log('Tick Processed. Resources:', resources);
    }

    requestAnimationFrame(gameLoop);
}

function initGame() {
    console.log("Booting Evolving Clicker Systems v2...");
    initResources(); // This now also sets up the click listener for resources
    initUpgrades();
    initResearch();
    // Teams are initialized via UI interaction

    updateResourceDisplay();
    // Initial UI population for choices/trees is handled in ui.js on DOMContentLoaded

    lastTickTime = performance.now();
    requestAnimationFrame(gameLoop);
    console.log("System Online. Game Loop Initiated.");
}

document.addEventListener('DOMContentLoaded', initGame);
